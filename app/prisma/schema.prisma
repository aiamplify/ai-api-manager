generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// NextAuth models
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // AI API Manager specific relations
  apiKeys       ApiKey[]
  usageData     UsageData[]
  budgets       Budget[]
  alerts        Alert[]
  insights      Insight[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// AI API Manager specific models
model Provider {
  id          String   @id @default(cuid())
  name        String   @unique // "openai", "anthropic", "google", "perplexity"
  displayName String   // "OpenAI", "Anthropic", "Google AI", "Perplexity"
  apiBaseUrl  String?
  hasUsageApi Boolean  @default(false) // Whether provider has programmatic usage API
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  models    Model[]
  apiKeys   ApiKey[]
  usageData UsageData[]
  budgets   Budget[]
}

model Model {
  id               String   @id @default(cuid())
  name             String   // "gpt-4", "claude-3-opus", etc.
  displayName      String   // "GPT-4", "Claude 3 Opus", etc.
  providerId       String
  inputTokenPrice  Float    // Price per 1M input tokens
  outputTokenPrice Float    // Price per 1M output tokens
  category         String?  // "chat", "reasoning", "search", etc.
  maxTokens        Int?     // Maximum context length
  isActive         Boolean  @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  provider   Provider    @relation(fields: [providerId], references: [id], onDelete: Cascade)
  usageData  UsageData[]
  budgets    Budget[]
  
  @@unique([name, providerId])
}

model ApiKey {
  id            String   @id @default(cuid())
  userId        String
  providerId    String
  name          String   // User-defined name for the key
  encryptedKey  String   // Encrypted API key
  keyHash       String   // Hash for verification
  lastUsed      DateTime?
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  provider   Provider    @relation(fields: [providerId], references: [id], onDelete: Cascade)
  usageData  UsageData[]
  
  @@unique([userId, providerId, name])
}

model UsageData {
  id            String   @id @default(cuid())
  userId        String
  providerId    String
  modelId       String?
  apiKeyId      String?
  date          DateTime // Date of usage
  inputTokens   Int      @default(0)
  outputTokens  Int      @default(0)
  totalTokens   Int      @default(0)
  requestCount  Int      @default(1)
  inputCost     Float    @default(0)
  outputCost    Float    @default(0)
  totalCost     Float    @default(0)
  isManual      Boolean  @default(false) // Whether data was manually entered
  metadata      Json?    // Additional provider-specific metadata
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  provider Provider  @relation(fields: [providerId], references: [id], onDelete: Cascade)
  model    Model?    @relation(fields: [modelId], references: [id], onDelete: SetNull)
  apiKey   ApiKey?   @relation(fields: [apiKeyId], references: [id], onDelete: SetNull)
  
  @@unique([userId, providerId, modelId, apiKeyId, date])
  @@index([userId, date])
  @@index([providerId, date])
}

model Budget {
  id            String   @id @default(cuid())
  userId        String
  providerId    String?  // Null for global budget
  modelId       String?  // Null for provider-wide budget
  name          String
  amount        Float    // Budget amount
  period        String   // "daily", "weekly", "monthly", "yearly"
  alertThreshold Float   @default(0.8) // Alert when 80% of budget is reached
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  provider Provider? @relation(fields: [providerId], references: [id], onDelete: Cascade)
  model    Model?    @relation(fields: [modelId], references: [id], onDelete: Cascade)
  alerts   Alert[]
}

model Alert {
  id        String   @id @default(cuid())
  userId    String
  budgetId  String?
  type      String   // "budget_exceeded", "high_usage", "optimization_opportunity"
  title     String
  message   String
  severity  String   // "low", "medium", "high", "critical"
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  budget Budget? @relation(fields: [budgetId], references: [id], onDelete: Cascade)
  
  @@index([userId, isRead])
  @@index([createdAt])
}

model Insight {
  id          String   @id @default(cuid())
  userId      String
  type        String   // "cost_optimization", "usage_pattern", "model_recommendation"
  title       String
  description String
  priority    String   @default("medium") // "low", "medium", "high"
  isActive    Boolean  @default(true)
  metadata    Json?    // Additional insight data
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, type])
  @@index([createdAt])
}
